// <auto-generated />
using System;
using System.Collections.Generic;
using GlobalFileStorage.Api.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GlobalFileStorage.Api.Migrations
{
    [DbContext(typeof(TenantDbContext))]
    partial class TenantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.FileItem", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("access_level");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<Guid>("EncryptionKeyId")
                        .HasColumnType("uuid")
                        .HasColumnName("encryption_key_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<DateTime?>("LastAccessedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed_timestamp");

                    b.Property<string>("MD5Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MD5_hash");

                    b.Property<Dictionary<string, string>>("Metadata")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("metadata");

                    b.Property<string>("SHA256Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SHA256_hash");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_path");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_timestamp");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("version_number");

                    b.HasKey("FileId")
                        .HasName("pk_files");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FileItem", (string)null);
                });

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("APIRateLimit")
                        .HasColumnType("integer")
                        .HasColumnName("API_rate_limit");

                    b.Property<long>("BandwidthQuota")
                        .HasColumnType("bigint")
                        .HasColumnName("bandwidth_quota");

                    b.Property<int>("BillingPlan")
                        .HasColumnType("integer")
                        .HasColumnName("billing_plan");

                    b.Property<int>("ComplianceRequirements")
                        .HasColumnType("integer")
                        .HasColumnName("comliance_requirements");

                    b.Property<string>("DataResidencyRegion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_residency_region");

                    b.Property<int>("EncryptionRequirements")
                        .HasColumnType("integer")
                        .HasColumnName("encryption_requirements");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organization_name");

                    b.Property<long>("StorageQuota")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_quota");

                    b.Property<string>("SubdomainPrefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subdomain_prefix");

                    b.Property<int>("TenantStatus")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_status");

                    b.HasKey("TenantId")
                        .HasName("pk_tenants");

                    b.ToTable("Tenant", (string)null);
                });

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.UsageStats", b =>
                {
                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("APICallsCount")
                        .HasColumnType("integer")
                        .HasColumnName("API_calss_count");

                    b.Property<int>("ActiveUserCount")
                        .HasColumnType("integer")
                        .HasColumnName("active_user_count");

                    b.Property<long>("BandwidthUsed")
                        .HasColumnType("bigint")
                        .HasColumnName("bandwidth_used");

                    b.Property<int>("FileOperationCount")
                        .HasColumnType("integer")
                        .HasColumnName("file_operation_count");

                    b.Property<long>("StorageUsed")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_used");

                    b.Property<Guid>("TenantId1")
                        .HasColumnType("uuid");

                    b.HasKey("TenantId");

                    b.HasIndex("TenantId1");

                    b.ToTable("UsageStats", (string)null);
                });

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("APIKeyHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("API_key_hash");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("IPWhitelist")
                        .HasColumnType("text")
                        .HasColumnName("IP_whitelist");

                    b.Property<DateTime>("LastLoginTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_timestamp");

                    b.Property<bool>("MFAEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("MFA_enabled");

                    b.Property<string>("PermissionsJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permission_json");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<TimeSpan>("SessionTimeout")
                        .HasColumnType("interval")
                        .HasColumnName("session_timeout");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("TenantId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.FileItem", b =>
                {
                    b.HasOne("GlobalFileStorage.Api.Common.Entities.Tenant", "Tenant")
                        .WithMany("Files")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalFileStorage.Api.Common.Entities.User", "User")
                        .WithOne("FileItem")
                        .HasForeignKey("GlobalFileStorage.Api.Common.Entities.FileItem", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.UsageStats", b =>
                {
                    b.HasOne("GlobalFileStorage.Api.Common.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.User", b =>
                {
                    b.HasOne("GlobalFileStorage.Api.Common.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.Tenant", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GlobalFileStorage.Api.Common.Entities.User", b =>
                {
                    b.Navigation("FileItem")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
